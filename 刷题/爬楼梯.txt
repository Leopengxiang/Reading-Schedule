初始暴力解法
class Solution {
    public int climbStairs(int n) {
        if (n == 1 || n == 0) {
            return 1;
        }
        return climbStair(n - 1) + climbStair(n - 2);
    }
}
指数复杂度44都算不了


优化记忆：
使用Map记忆：
class Solution {
    private Map<Integer, Integer> nToSol = new HashMap<>();
    public int climbStairs(int n) {
        if (n == 1 || n == 0) {
            return 1;
        }
        if (!nToSol.containsKey(n)) {
            nToSol.put(n, climbStairs(n - 1) + climbStairs(n - 2));
        } 
        return nToSol.get(n);
    }
}

使用数组记忆
public class Solution {
   
    public int climbStairs(int n) {
        int[] memo = new int[n + 1];
        return climbStairsH(n, memo);
    }

    private int climbStairsH(int n, int[] memo) {
        if (n == 1 || n == 0) {
            return 1;
        }
        if (memo[n] == 0) {
            memo[n] = climbStairsH(n - 1, memo) + climbStairsH(n-2, memo);
        } 
        return memo[n];
    }
}
复杂度O(n);

动态规划：
public class Solution {
   
    public int climbStairs(int n) {
        int[] dp = new int[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i < n + 1; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
}

时间复杂度仍然为O(n);

官方题解






