public class Solution {
    public boolean hasPath(char[] matrix, int rows, int cols, char[] str){
        if (rows < 1 || cols < 1) {
            return false;
        }
        
        boolean[] visited = new boolean[rows * cols];
        for (int i = 0; i < visited.length; i++) {
                 visited[i] = false;
            
        }
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (hasPathCore(matrix, rows, cols, i, j, 0, str, visited)) {
                    return true;
                }
            }
        }
        return false;
    }

    
    public boolean hasPathCore(char[] matrix, int rows, int cols, int row, int col,int depth, char[] str, boolean[] visited) {
        if (depth == str.length) {
            return true;
        }
        boolean hasPath = false;
        if (row >=0  && row < rows && col >= 0 && col < cols && matrix[row * cols + col] == str[depth]
                     && visited[row * cols + col] == false) {
            depth++;
            visited[row * cols + col] = true;
            
            hasPath = hasPathCore(matrix, rows, cols, row - 1, col, depth, str, visited)
                       || hasPathCore(matrix, rows, cols, row + 1, col, depth, str, visited)
                       || hasPathCore(matrix, rows, cols, row, col - 1, depth, str, visited)
                       || hasPathCore(matrix, rows, cols, row, col + 1, depth, str, visited);
            
            if (hasPath == false) {
                depth--;
                visited[row * cols + col] = false;
            }
            
        }
        return hasPath;
    }
}