暴力解法
class Solution {
    public int maxSubArray(int[] nums) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            int sum = 0;
            for (int j = i; j < nums.length; j++) {
                sum = sum + nums[j];   
                if (max < sum) {
                    max = sum;
                }
            }
        }
        return max;
    }
}
时间复杂读n2

class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0];
        int sum = 0;
        for (int i = 0; i < nums.length; i++) {
            if (sum < 0) {
                sum = nums[i];
            } else {
                sum = sum + nums[i];
            }
            max = Math.max(sum, max);
        }
        return max;
    }
}
时间复杂度为n;
动态规划
状态： 连续
当前面连续的值和为负数时，就没用了，加上反而会使值减小。
所以此时可以让sum = num
而max = Math.max(sum, max);


