public class Solution {
    public int cutRope(int target) {
        if (target < 2) {
            return 0;
        }
        if (target == 2) {
            return 1;
        }
        if (target == 3) {
            return 2;
        }
        
        int[] products = new int[target + 1];
        products[0] = 0;
        products[1] = 1;
        products[2] = 2;
        products[3] = 3;
        int max = 0;
        for (int i = 4; i <= target; i++) {
            max =0;
            for (int j = 1; j <= i / 2; j++) {
	int product = products[j] * products[i - j];
                if (product > max) {
                    max = product;
                }
                products[i] = max;
            }
        }
        return products[target];
    }
}


贪婪法

public class Solution {
    public int cutRope(int target) {
        if (target < 2) {
            return 0;
        }
        if (target == 2) {
            return 1;
        }
        if (target == 3) {
            return 2;
        }
        
        int timesOf3 = target / 3;
        
        if (timesOf3 * 3 + 1 == target) {
            timesOf3 = timesOf3 - 1;
        }
        
        int timesOf2 = (target - timesOf3 * 3) / 2;
        
        return (int) (Math.pow(3, timesOf3) * Math.pow(2, timesOf2));
   }
}



