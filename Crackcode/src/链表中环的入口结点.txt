/*
 public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}
*/
public class Solution {

    public ListNode EntryNodeOfLoop(ListNode pHead){
        ListNode meetNode = meetingNode(pHead);
        if (meetNode == null) {
            return null;
        }
        int nodesInCircle = 1;
        ListNode probeNode = meetNode.next;
        while (probeNode != meetNode) {
            nodesInCircle++;
            probeNode = probeNode.next;
        }
        ListNode node1 = pHead;
        ListNode node2 = pHead;
        for (int i = 0; i < nodesInCircle; i++) {
            node1 = node1.next;
        }
        while (node1 != node2) {
            node1 = node1.next;
            node2 = node2.next;
        }
        return node1;
    }
    
    public static ListNode meetingNode(ListNode pHead) {
        if (pHead == null) {
            return null;
        }
        ListNode quickOne = pHead;
        ListNode slowOne = pHead;
        while (quickOne.next != null) {
            for (int i = 0; i < 2; i++) {
                quickOne = quickOne.next;
                if (quickOne == slowOne) {
                    return quickOne;
                }
                if (quickOne == null) {
                    return null;
                }
            }
            slowOne = slowOne.next;
        }
        return null;
    }
}
1. 是否存在环，并返回环中的任意一个节点
2. 利用该节点计算环的长度
3. 快慢指针找环的入口