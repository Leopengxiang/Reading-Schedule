/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/

public class Solution {
    public ListNode ReverseList(ListNode head) {
        ListNode pPrev = null;
        ListNode pNode = head;
        while (pNode != null) {
            ListNode pNext = pNode.next;
            pNode.next = pPrev;
            pPrev = pNode;
            pNode = pNext;
        }
        return pPrev;
    }
}

递归解法
public class Solution {
    public ListNode ReverseList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode reversedHead = ReverseList(head.next);
        head.next.next = head;
        head.next = null;
        return reversedHead;
    }
}