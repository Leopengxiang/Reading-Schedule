class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 2) {
            return s;
        }
        int startIndex = -1;
        int endIndex = -1;
        int[] raw = {startIndex, endIndex};
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == s.charAt(i - 1)) {
                int tStartIndex = i - 1;
                int tEndIndex = i;
                int[] indexs = {tStartIndex, tEndIndex};
                getIndex(indexs, s);
                
                update(raw, indexs);
                startIndex = raw[0];
                endIndex = raw[1];
            } 
            
            if(i + 1 < s.length() && s.charAt(i - 1) == s.charAt(i + 1)) {
                int tStartIndex = i -1;
                int tEndIndex = i + 1;
                int[] indexs = {tStartIndex, tEndIndex};
                getIndex(indexs, s);
                update(raw, indexs);
                startIndex = raw[0];
                endIndex = raw[1];
            }
            System.out.println("start " + startIndex + "end " + endIndex);
        }
        if (endIndex - startIndex >= 1) 
            return s.substring(startIndex, endIndex + 1);
        else 
            return s.substring(0, 1);
    }
        

    
    private static void getIndex(int[] indexs, String s) {
        int tStartIndex = indexs[0];
        int tEndIndex = indexs[1];
        while(tStartIndex - 1 >= 0 && tEndIndex + 1 < s.length()) {
            if (s.charAt(tStartIndex -1) != s.charAt(tEndIndex + 1)) {
                break;
            }
            tStartIndex--;
            tEndIndex++;
            indexs[0] = tStartIndex;
            indexs[1] = tEndIndex;
        }    
    }
        
    private static void update(int[] raw, int[] now) {
        if (now[1] - now[0] > raw[1] - raw[0]) {
            raw[1] = now[1];
            raw[0] = now[0];
        }
    }
        
}


// 完全一样的想法，但是写的比我优美多了。
public String longestPalindrome(String s) {
    if (s == null || s.length() < 1) return "";
    int start = 0, end = 0;
    for (int i = 0; i < s.length(); i++) {
        int len1 = expandAroundCenter(s, i, i);                                    // 奇数也可以看做从一个左右端起始为同一点向外扩， 奇数外扩可以看成偶数外扩的一个特例
        int len2 = expandAroundCenter(s, i, i + 1);                             // 偶数可以看成两个点向外扩
        int len = Math.max(len1, len2);
        if (len > end - start) {    
            start = i - (len - 1) / 2;                                 // 统一奇数和偶数条件下的始端求法， 原理： 当len为奇数时， (len-1) / 2 = len / 2;  当len为偶数时 （len-1) / 2 = len/2 -1; 
            end = i + len / 2;
        }
    }
    return s.substring(start, end + 1);
}

private int expandAroundCenter(String s, int left, int right) {
    int L = left, R = right;
    while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
        L--;
        R++;
    }
    return R - L - 1;
}

