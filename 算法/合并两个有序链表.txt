/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode ans = new ListNode(1);    // 预设一个头指针哨兵很重要
        ListNode pre = ans;
        while (l1 != null && l2 != null) {
            ListNode next1 = l1.next, next2 = l2.next;
            if (l1.val > l2.val) {
                l2.next = null;
                ans.next = l2;
                l2 = next2;
            } else{
                l1.next = null;
                ans.next = l1;
                l1 = next1;
            }
            ans = ans.next;
        }
        // 无论是开始就有一个或者都为空，还是经历了while之后一个为空， 下面这个语句能把所提及的情况全部处理掉
        ans.next = l1 == null ? l2 : l1; 
        return pre.next;
    }
}

// 迭代做法
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;    //这是连接或是最后结果，不要忘记将其返回
        }
        if (l2 == null) {
            return l1;    //这是连接或是最后结果，不要忘记将其返回
        }
        if (l1.val < l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;    //这是连接或是最后结果，不要忘记将其返回
        } else {
            l2.next = mergeTwoLists(l2.next, l1);
            return l2;  //这是连接或是最后结果，不要忘记将其返回
        }
    }
}

递归做法： 
代码好理解，易看懂
return语句一定要注意